- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    key_loc: ~/.ssh/{{ set_name }}_id_rsa
    #set_name: example-name
    #aws_env: example-env
    #region: us-east-1
    #instance_type: t2.medium
    #ami: ami-21630d44
    #count: 1
  tasks:
  - ec2_vpc:
      state: present
      cidr_block: 172.22.0.0/16
      resource_tags: { "Name":"{{ aws_env }}" }
      region: "{{ region }}"
      subnets:
      - cidr: 172.22.1.0/24
        resource_tags: { "Set" : "set_name" }
      internet_gateway: True
      route_tables:
        - subnets:
            - 172.22.1.0/24
          routes:
            - dest: 0.0.0.0/0
              gw: igw
    register: vpc

  - command: ssh-keygen -t rsa -b 2048 -f {{ key_loc }} -N "" creates={{ key_loc }}

  - name: ec2 key
    local_action:
      module: ec2_key
      name: "{{ aws_env }}"
      key_material: "{{ item }}"
      region: "{{ region }}"
    with_file: "{{ key_loc }}.pub"

  - name: ec2 group
    local_action:
      module: ec2_group
      name: "{{ set_name }}"
      description: "{{ set_name }}"
      region: "{{ region }}"
      vpc_id: "{{ vpc['vpc']['id'] }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: all
          group_name: "{{ set_name }}"

  - name: Initialize nodes
    local_action:
      module: ec2
      key_name: "{{ aws_env }}"
      instance_type: "{{ instance_type }}"
      instance_tags:
        Type: "{{ set_name }}"
        Env: "{{ aws_env }}"
      count_tag:
        Type: "{{ set_name }}"
        Env: "{{ aws_env }}"
      image: "{{ ami }}"
      wait: yes
      group: "{{ set_name }}"
      region: "{{ region }}"
      wait_timeout: 500
      exact_count: "{{ count }}"
      vpc_subnet_id: "{{ vpc['subnets'][0]['id'] }}"
      assign_public_ip: yes
      monitoring: no
    register: ec2

  - name: Name nodes
    local_action:
      module: ec2_tag
      region: "{{ region }}"
      state: present
      tags:
        Name: "{{ set_name }}-{{ item.ami_launch_index }}"
      resource: "{{ item.id }}"
    with_items: ec2.instances

  # Make sure config.sh and config.d are setup
  - copy: src=files/config.sh dest=~/.ssh/config.sh mode=700
  - command: ~/.ssh/config.sh creates=~/.ssh/config.d

  - template: src=./files/ssh-config.j2 dest=~/.ssh/config.d/99_{{ set_name }}-{{ item.ami_launch_index }}
    with_items: ec2.instances
  - command: ~/.ssh/config.sh

  - file: dest=./inventory state=directory
  - command: touch inventory/hosts creates=./inventory/hosts

  - copy: dest=./inventory/hosts_{{ set_name }} content="[{{ set_name }}]"
  - copy: dest=./ansible.cfg content="[defaults]\ninventory = ./inventory"
  - lineinfile: dest=./inventory/hosts_{{ set_name }} regexp=^{{ set_name }}-{{ item.ami_launch_index }} line={{ set_name }}-{{ item.ami_launch_index }}
    with_items: ec2.instances

  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: ec2.instances
